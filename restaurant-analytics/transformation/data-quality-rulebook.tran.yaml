type: "transformation"
version: "1.0"
pipeline:
  components:
    Customer Data:
      type: "table-input"
      parameters:
        componentName: "Customer Data"
        database: "[Environment Default]"
        schema: "[Environment Default]"
        targetTable: "REST_CUSTOMERS"
        columnNames:
        - "customer_id"
        - "first_name"
        - "last_name"
        - "email"
        - "phone"
        - "registration_date"
        - "loyalty_points"
    Customer Quality Checks:
      type: "calculator"
      sources:
      - "Customer Data"
      parameters:
        componentName: "Customer Quality Checks"
        includeInputColumns: "Yes"
        calculations:
        - - "CASE \n  WHEN \"customer_id\" IS NULL THEN 'FAIL_NULL_ID'\n  WHEN \"\
            email\" IS NULL OR \"email\" = '' THEN 'FAIL_MISSING_EMAIL'\n  WHEN \"\
            email\" NOT LIKE '%@%.%' THEN 'FAIL_INVALID_EMAIL'\n  WHEN \"first_name\"\
            \ IS NULL OR \"first_name\" = '' THEN 'FAIL_MISSING_NAME'\n  WHEN \"registration_date\"\
            \ IS NULL THEN 'FAIL_MISSING_DATE'\n  WHEN \"registration_date\" > CURRENT_DATE()\
            \ THEN 'FAIL_FUTURE_DATE'\n  WHEN \"loyalty_points\" < 0 THEN 'FAIL_NEGATIVE_POINTS'\n\
            \  ELSE 'PASS'\nEND\n"
          - "CUSTOMER_QUALITY_STATUS"
        - - "CASE \n  WHEN \"CUSTOMER_QUALITY_STATUS\" = 'PASS' THEN 1 \n  ELSE 0\
            \ \nEND\n"
          - "QUALITY_SCORE"
    Customer Assert Validation:
      type: "assert-view-sf"
      sources:
      - "Customer Quality Checks"
      parameters:
        componentName: "Customer Assert Validation"
        ignoreMetadataOrder: "No"
        rowCountComparisonType: "Greater Than or Equal To"
        lowerValue: "1"
    Failed Customer Records:
      type: "filter"
      sources:
      - "Customer Quality Checks"
      parameters:
        componentName: "Failed Customer Records"
        filterConditions:
        - - "CUSTOMER_QUALITY_STATUS"
          - "Not"
          - "Equal to"
          - "PASS"
        combineCondition: "And"
    Employee Data:
      type: "table-input"
      parameters:
        componentName: "Employee Data"
        database: "[Environment Default]"
        schema: "[Environment Default]"
        targetTable: "REST_EMPLOYEES"
        columnNames:
        - "employee_id"
        - "first_name"
        - "last_name"
        - "department"
        - "position"
        - "hire_date"
        - "salary"
        - "manager_id"
    Employee Quality Checks:
      type: "calculator"
      sources:
      - "Employee Data"
      parameters:
        componentName: "Employee Quality Checks"
        includeInputColumns: "Yes"
        calculations:
        - - "CASE \n  WHEN \"employee_id\" IS NULL THEN 'FAIL_NULL_ID'\n  WHEN \"\
            first_name\" IS NULL OR \"first_name\" = '' THEN 'FAIL_MISSING_NAME'\n\
            \  WHEN \"last_name\" IS NULL OR \"last_name\" = '' THEN 'FAIL_MISSING_LASTNAME'\n\
            \  WHEN \"department\" NOT IN ('Kitchen', 'Service', 'Management', 'Cleaning')\
            \ THEN 'FAIL_INVALID_DEPT'\n  WHEN \"hire_date\" IS NULL THEN 'FAIL_MISSING_HIRE_DATE'\n\
            \  WHEN \"hire_date\" > CURRENT_DATE() THEN 'FAIL_FUTURE_HIRE'\n  WHEN\
            \ \"salary\" <= 0 THEN 'FAIL_INVALID_SALARY'\n  WHEN \"salary\" > 200000\
            \ THEN 'FAIL_EXCESSIVE_SALARY'\n  ELSE 'PASS'\nEND\n"
          - "EMPLOYEE_QUALITY_STATUS"
        - - "CASE \n  WHEN \"EMPLOYEE_QUALITY_STATUS\" = 'PASS' THEN 1 \n  ELSE 0\
            \ \nEND\n"
          - "QUALITY_SCORE"
    Employee Assert Validation:
      type: "assert-view-sf"
      sources:
      - "Employee Quality Checks"
      parameters:
        componentName: "Employee Assert Validation"
        ignoreMetadataOrder: "No"
        rowCountComparisonType: "Greater Than or Equal To"
        lowerValue: "1"
    Menu Data:
      type: "table-input"
      parameters:
        componentName: "Menu Data"
        database: "[Environment Default]"
        schema: "[Environment Default]"
        targetTable: "REST_MENUS"
        columnNames:
        - "menu_id"
        - "item_name"
        - "category"
        - "price"
        - "description"
        - "is_available"
        - "calories"
    Menu Quality Checks:
      type: "calculator"
      sources:
      - "Menu Data"
      parameters:
        componentName: "Menu Quality Checks"
        includeInputColumns: "Yes"
        calculations:
        - - "CASE \n  WHEN \"menu_id\" IS NULL THEN 'FAIL_NULL_ID'\n  WHEN \"item_name\"\
            \ IS NULL OR \"item_name\" = '' THEN 'FAIL_MISSING_NAME'\n  WHEN \"category\"\
            \ NOT IN ('Appetizer', 'Main', 'Dessert', 'Beverage', 'Side') THEN 'FAIL_INVALID_CATEGORY'\n\
            \  WHEN \"price\" <= 0 THEN 'FAIL_INVALID_PRICE'\n  WHEN \"price\" > 100\
            \ THEN 'FAIL_EXCESSIVE_PRICE'\n  WHEN \"calories\" < 0 THEN 'FAIL_NEGATIVE_CALORIES'\n\
            \  WHEN \"calories\" > 5000 THEN 'FAIL_EXCESSIVE_CALORIES'\n  ELSE 'PASS'\n\
            END\n"
          - "MENU_QUALITY_STATUS"
        - - "CASE \n  WHEN \"MENU_QUALITY_STATUS\" = 'PASS' THEN 1 \n  ELSE 0 \nEND\n"
          - "QUALITY_SCORE"
    Menu Assert Validation:
      type: "assert-view-sf"
      sources:
      - "Menu Quality Checks"
      parameters:
        componentName: "Menu Assert Validation"
        ignoreMetadataOrder: "No"
        rowCountComparisonType: "Greater Than or Equal To"
        lowerValue: "1"
    Order Data:
      type: "table-input"
      parameters:
        componentName: "Order Data"
        database: "[Environment Default]"
        schema: "[Environment Default]"
        targetTable: "REST_ORDER"
        columnNames:
        - "order_id"
        - "customer_id"
        - "employee_id"
        - "order_date"
        - "total_amount"
        - "payment_method"
        - "status"
    Order Quality Checks:
      type: "calculator"
      sources:
      - "Order Data"
      parameters:
        componentName: "Order Quality Checks"
        includeInputColumns: "Yes"
        calculations:
        - - "CASE \n  WHEN \"order_id\" IS NULL THEN 'FAIL_NULL_ID'\n  WHEN \"customer_id\"\
            \ IS NULL THEN 'FAIL_NULL_CUSTOMER'\n  WHEN \"employee_id\" IS NULL THEN\
            \ 'FAIL_NULL_EMPLOYEE'\n  WHEN \"order_date\" IS NULL THEN 'FAIL_MISSING_DATE'\n\
            \  WHEN \"order_date\" > CURRENT_DATE() THEN 'FAIL_FUTURE_ORDER'\n  WHEN\
            \ \"total_amount\" <= 0 THEN 'FAIL_INVALID_TOTAL'\n  WHEN \"total_amount\"\
            \ > 1000 THEN 'FAIL_EXCESSIVE_TOTAL'\n  WHEN \"payment_method\" NOT IN\
            \ ('Cash', 'Card', 'Digital') THEN 'FAIL_INVALID_PAYMENT'\n  WHEN \"status\"\
            \ NOT IN ('Pending', 'Completed', 'Cancelled') THEN 'FAIL_INVALID_STATUS'\n\
            \  ELSE 'PASS'\nEND\n"
          - "ORDER_QUALITY_STATUS"
        - - "CASE \n  WHEN \"ORDER_QUALITY_STATUS\" = 'PASS' THEN 1 \n  ELSE 0 \n\
            END\n"
          - "QUALITY_SCORE"
    Order Assert Validation:
      type: "assert-view-sf"
      sources:
      - "Order Quality Checks"
      parameters:
        componentName: "Order Assert Validation"
        ignoreMetadataOrder: "No"
        rowCountComparisonType: "Greater Than or Equal To"
        lowerValue: "1"
  variables:
    max_failed_records:
      metadata:
        type: "NUMBER"
        description: "Maximum number of failed records allowed per table"
        scope: "SHARED"
        visibility: "PUBLIC"
      defaultValue: "10"
    validation_enabled:
      metadata:
        type: "TEXT"
        description: "Enable/disable strict validation mode"
        scope: "SHARED"
        visibility: "PUBLIC"
      defaultValue: "Yes"
    min_customer_score:
      metadata:
        type: "NUMBER"
        description: "Minimum quality score threshold for customer data (0.0-1.0)"
        scope: "SHARED"
        visibility: "PUBLIC"
      defaultValue: "0.95"
design:
  components:
    Customer Data:
      position:
        x: 0
        "y": 0
      tempMetlId: 1
    Customer Quality Checks:
      position:
        x: 200
        "y": 0
      tempMetlId: 2
    Customer Assert Validation:
      position:
        x: 400
        "y": 0
      tempMetlId: 3
    Failed Customer Records:
      position:
        x: 400
        "y": 110
      tempMetlId: 4
    Employee Data:
      position:
        x: 0
        "y": 200
      tempMetlId: 5
    Employee Quality Checks:
      position:
        x: 200
        "y": 200
      tempMetlId: 6
    Employee Assert Validation:
      position:
        x: 400
        "y": 200
      tempMetlId: 7
    Menu Data:
      position:
        x: 0
        "y": 400
      tempMetlId: 8
    Menu Quality Checks:
      position:
        x: 200
        "y": 400
      tempMetlId: 9
    Menu Assert Validation:
      position:
        x: 400
        "y": 400
      tempMetlId: 10
    Order Data:
      position:
        x: 0
        "y": 600
      tempMetlId: 11
    Order Quality Checks:
      position:
        x: 200
        "y": 600
      tempMetlId: 12
    Order Assert Validation:
      position:
        x: 400
        "y": 600
      tempMetlId: 13
